# -*- coding: utf-8 -*-
import io
import json
import hashlib
import binascii
from datetime import datetime, timezone
from typing import List, Dict, Any, Optional

import pandas as pd
import streamlit as st
from asn1crypto import cms  # Para leer firmas PKCS#7 (.p7s) y extraer messageDigest


# ================== Configuraci√≥n ==================
st.set_page_config(
    page_title="UD3 ‚Äî De la prueba jur√≠dica a la prueba criptogr√°fica",
    page_icon="‚öñÔ∏è",
    layout="wide"
)

# Estado para cadena de custodia did√°ctica
if "chain" not in st.session_state:
    st.session_state.chain: List[Dict[str, Any]] = []


# ================== Utilidades ==================
def sha256_hex(b: bytes) -> str:
    return hashlib.sha256(b).hexdigest()

def now_iso_utc() -> str:
    return datetime.now(timezone.utc).isoformat()

def _bytes_to_hex(b: bytes) -> str:
    return binascii.hexlify(b).decode("ascii")

def _hash_linked_entry(prev_hash: Optional[str], payload: Dict[str, Any]) -> Dict[str, Any]:
    """
    Construye un bloque simplificado (hash encadenado).
    """
    body = json.dumps(payload, sort_keys=True, ensure_ascii=False).encode("utf-8")
    base = (prev_hash or "").encode("utf-8") + body
    return {
        "ts_utc": now_iso_utc(),
        "prev": prev_hash or "GENESIS",
        "payload": payload,
        "hash": sha256_hex(base)
    }

def _parse_pkcs7_message_digest(p7s_bytes: bytes) -> Dict[str, Any]:
    """
    Lee un PKCS#7/CMS SignedData (.p7s) y devuelve:
      - algoritmo de digest declarado
      - messageDigest de signedAttrs (hex)
      - si contiene contenido encapsulado
    (No valida cadena ni revocaci√≥n; es lectura did√°ctica).
    """
    out: Dict[str, Any] = {}
    ci = cms.ContentInfo.load(p7s_bytes)
    if ci["content_type"].native != "signed_data":
        raise ValueError("El archivo no es SignedData (PKCS#7).")
    sd = ci["content"]
    out["has_encapsulated_content"] = sd["encap_content_info"]["content"] is not None
    # Primer signerInfo
    sis = sd["signer_infos"]
    if len(sis) == 0:
        raise ValueError("No hay signerInfos en el PKCS#7.")
    si = sis[0]
    out["digest_algorithm"] = si["digest_algorithm"]["algorithm"].native  # p. ej. 'sha256'
    # messageDigest en signed_attrs
    signed_attrs = si["signed_attrs"]
    md = None
    if signed_attrs is not None:
        for attr in signed_attrs:
            if attr["type"].dotted == "1.2.840.113549.1.9.4":  # messageDigest
                md = attr["values"][0].native  # bytes
                break
    if md is None:
        raise ValueError("El PKCS#7 no contiene messageDigest en signedAttrs.")
    out["message_digest_hex"] = _bytes_to_hex(md)
    return out


# ================== Contenido did√°ctico ==================
st.title("UD3 ‚Äî De la prueba jur√≠dica a la prueba criptogr√°fica")
st.caption("Transici√≥n: testimonio/documental/pericial ‚Üí evidencia matem√°tica ¬∑ Comparaci√≥n: documento firmado vs hash autenticado")

tabs = st.tabs([
    "üìö Teor√≠a guiada",
    "üßÆ Comparador de valor probatorio",
    "üß∞ Simulador de cadena de custodia",
    "‚úÖ Autoevaluaci√≥n",
    "üì¶ Glosario & Descargas"
])

# --------- Teor√≠a ---------
with tabs[0]:
    c1, c2 = st.columns([1.2, 1])
    with c1:
        st.subheader("Objetivos de la unidad")
        st.write(
            "- Entender el paso de **prueba testifical/documental/pericial** a **prueba criptogr√°fica** (hash, firma, TSA).\n"
            "- Diferenciar qu√© aporta un **documento firmado electr√≥nicamente** frente a un **hash autenticado**.\n"
            "- Discutir l√≠mites: identidad/capacidad/consentimiento ‚â† matem√°tica del hash."
        )

        st.subheader("Mapa r√°pido de medios de prueba")
        df = pd.DataFrame({
            "Medio de prueba": [
                "Testifical",
                "Documental (p√∫blica/privada)",
                "Pericial",
                "Evidencia criptogr√°fica (hash, firma, TSA)"
            ],
            "¬øQu√© aporta?": [
                "Relato humano bajo contradicci√≥n",
                "Constancia escrita; p√∫blica: fe p√∫blica / privada: valor reforzado si firmada",
                "Criterio t√©cnico objetivo",
                "Integridad/autor√≠a (firma) y/o existencia-en-tiempo (TSA) verificable matem√°ticamente"
            ],
            "L√≠mites": [
                "Memoria, sesgos",
                "Autenticidad/alteraci√≥n",
                "Alcance t√©cnico, contradicci√≥n",
                "Contexto jur√≠dico (identidad/capacidad), cadena y archivo"
            ]
        })
        st.dataframe(df, width="stretch")

    with c2:
        st.info(
            "La matem√°tica verifica hechos sobre datos. La validez jur√≠dica depende del **contexto probatorio** "
            "(identidad, capacidad, consentimiento, cadena de custodia, conservaci√≥n, pol√≠ticas)."
        )

# --------- Comparador de valor probatorio ---------
with tabs[1]:
    st.subheader("Documento firmado electr√≥nicamente ‚Üî Hash autenticado (con evidencia)")
    st.caption("Comparador did√°ctico. No sustituye validaciones cualificadas ni pol√≠ticas corporativas.")

    left, right = st.columns(2)

    with left:
        st.markdown("### A) Documento firmado (PKCS#7 `.p7s` con firma DETACHED)")
        sig_file = st.file_uploader(
            "Sube la firma (.p7s). Si es firma separada, sube tambi√©n el **documento original** para comprobar el messageDigest.",
            type=["p7s"], key="ud3_sig")
        orig_file = st.file_uploader("Documento original (para comprobar el messageDigest)", type=None, key="ud3_orig")

        if sig_file is not None:
            try:
                sig_bytes = sig_file.read()
                info = _parse_pkcs7_message_digest(sig_bytes)
                st.markdown("**Atributos de la firma (resumen)**")
                st.json(info, expanded=False)

                # Si hay documento, comparar el hash con el messageDigest
                if orig_file is not None:
                    data = orig_file.read()
                    alg = (info.get("digest_algorithm") or "sha256").lower()
                    if alg in ("sha256", "2.16.840.1.101.3.4.2.1"):
                        calc = hashlib.sha256(data).hexdigest()
                    elif alg in ("sha1", "1.3.14.3.2.26"):
                        calc = hashlib.sha1(data).hexdigest()
                    elif alg in ("sha512", "2.16.840.1.101.3.4.2.3"):
                        calc = hashlib.sha512(data).hexdigest()
                    else:
                        calc = hashlib.sha256(data).hexdigest()

                    st.markdown("**Verificaci√≥n del alcance de la firma (messageDigest)**")
                    st.code(f"messageDigest (PKCS#7): {info['message_digest_hex']}", language="text")
                    st.code(f"Digest del documento: {calc}", language="text")
                    if info["message_digest_hex"].lower() == calc.lower():
                        st.success("‚úÖ El messageDigest coincide: la firma cubre estos datos.")
                    else:
                        st.error("‚ùå El messageDigest NO coincide con el documento.")

                st.caption(
                    "Nota: aqu√≠ NO se valida la cadena de confianza ni el estado de revocaci√≥n. "
                    "El objetivo es did√°ctico (alcance de la firma)."
                )
            except Exception as e:
                st.error(f"Error al leer el PKCS#7: {e}")

    with right:
        st.markdown("### B) Hash autenticado (evidencia JSON) + Documento")
        evid_file = st.file_uploader("Evidencia JSON (p. ej., generada en otra pr√°ctica)", type=["json"], key="ud3_evid_json")
        doc_file = st.file_uploader("Documento a contrastar con la evidencia", type=None, key="ud3_doc_hash")

        # Comparaci√≥n hash ‚Üî documento
        if evid_file is not None and doc_file is not None:
            try:
                evid = json.loads(evid_file.read().decode("utf-8"))
                dbytes = doc_file.read()
                h = sha256_hex(dbytes)
                st.markdown("**Comparaci√≥n de integridad**")
                st.code(f"SHA-256 (doc): {h}", language="text")
                st.code(f"SHA-256 (evidencia): {evid.get('sha256')}", language="text")
                if h == evid.get("sha256"):
                    st.success("‚úÖ Coincide el hash: integridad preservada respecto a la evidencia.")
                else:
                    st.error("‚ùå No coincide el hash con la evidencia.")

                st.markdown("**Metadatos de la evidencia**")
                st.json({
                    "filename": evid.get("filename"),
                    "size_bytes": evid.get("size_bytes"),
                    "computed_at_utc": evid.get("computed_at_utc"),
                    "notes": evid.get("notes")
                }, expanded=False)
            except Exception as e:
                st.error(f"No se pudo leer la evidencia: {e}")

    st.divider()
    st.markdown("### Tabla comparativa (resultado pedag√≥gico)")
    comp = pd.DataFrame({
        "Criterio": [
            "Integridad del contenido",
            "Autor√≠a criptogr√°fica",
            "Fecha cierta (dataci√≥n)",
            "Oponibilidad/fe p√∫blica",
            "Verificabilidad independiente",
            "Dependencia de terceros"
        ],
        "Documento firmado (X.509)": [
            "S√≠ (messageDigest cubierto por la firma)",
            "S√≠ (clave privada del firmante)",
            "Si hay sello de tiempo o pol√≠tica que la aporte",
            "Depende del contexto (p. ej., cualificada, notarial, etc.)",
            "S√≠ (herramientas PKI)",
            "CA/PSC y, si aplica, TSA"
        ],
        "Hash autenticado (+ TSA/anchor)": [
            "S√≠ (hash del fichero)",
            "No por s√≠ solo (no identifica autor)",
            "S√≠ si incorpora TSA/anchor cre√≠ble",
            "No hay fe p√∫blica civil por defecto",
            "S√≠ (recomputando hash y validando TSA)",
            "TSA/red; pol√≠ticas de evidencia"
        ]
    })
    st.dataframe(comp, width="stretch")

# --------- Simulador de cadena de custodia ---------
with tabs[2]:
    st.subheader("Simulador de cadena de custodia (encadenado con hash)")
    st.caption("A√±ade eventos (qui√©n, qu√©, d√≥nde) y genera un **log encadenado** exportable (JSONL).")

    with st.form("custodia_form", clear_on_submit=True):
        actor = st.text_input("Actor (qui√©n)", placeholder="p. ej., T√©cnico Forense 1")
        accion = st.text_input("Acci√≥n (qu√©)", placeholder="p. ej., Adquisici√≥n de imagen forense")
        lugar = st.text_input("Lugar/Soporte (d√≥nde)", placeholder="p. ej., Laboratorio A, Caja #12")
        notas = st.text_area("Notas (opcional)", placeholder="Serie, precintos, hash del soporte, etc.")
        subm = st.form_submit_button("A√±adir evento")

    if subm:
        payload = {
            "actor": actor.strip() or "‚Äî",
            "accion": accion.strip() or "‚Äî",
            "lugar": lugar.strip() or "‚Äî",
            "notas": notas.strip() or "‚Äî"
        }
        prev = st.session_state.chain[-1]["hash"] if st.session_state.chain else None
        block = _hash_linked_entry(prev, payload)
        st.session_state.chain.append(block)
        st.success("Evento a√±adido a la cadena.")

    if st.session_state.chain:
        st.markdown("### Vista de la cadena")
        dfc = pd.DataFrame([{
            "ts_utc": e["ts_utc"],
            "prev": e["prev"][:12] + "‚Ä¶" if e["prev"] != "GENESIS" else "GENESIS",
            "hash": e["hash"][:16] + "‚Ä¶",
            "actor": e["payload"]["actor"],
            "accion": e["payload"]["accion"],
            "lugar": e["payload"]["lugar"]
        } for e in st.session_state.chain])
        st.dataframe(dfc, width="stretch")
        st.caption("Hash truncado para lectura; el export incluye hashes completos.")

        colx, coly = st.columns(2)
        with colx:
            if st.button("Verificar consistencia"):
                ok = True
                prev = None
                for e in st.session_state.chain:
                    body = json.dumps(e["payload"], sort_keys=True, ensure_ascii=False).encode("utf-8")
                    base = (prev or "").encode("utf-8") + body
                    if sha256_hex(base) != e["hash"]:
                        ok = False
                        break
                    prev = e["hash"]
                if ok:
                    st.success("‚úÖ Cadena consistente (no hay alteraciones detectables).")
                else:
                    st.error("‚ùå Inconsistencia detectada (posible alteraci√≥n).")

        with coly:
            jsonl = "".join(json.dumps(e, ensure_ascii=False) + "\n" for e in st.session_state.chain)
            st.download_button(
                "Exportar cadena (.jsonl)",
                io.BytesIO(jsonl.encode("utf-8")),
                file_name="custodia_ud3.jsonl",
                mime="application/jsonl"
            )
    else:
        st.info("A√∫n no hay eventos en la cadena. A√±ade el primero con el formulario.")

# --------- Autoevaluaci√≥n ---------
with tabs[3]:
    st.subheader("Autoevaluaci√≥n r√°pida")
    preguntas = [
        {
            "q": "¬øQu√© elemento aporta la **autor√≠a criptogr√°fica**?",
            "opts": ["Hash del documento", "Firma electr√≥nica (clave privada del firmante)", "TSA", "Registro p√∫blico"],
            "ok": "Firma electr√≥nica (clave privada del firmante)"
        },
        {
            "q": "Un hash con TSA cualificada demuestra principalmente‚Ä¶",
            "opts": ["Capacidad del autor", "Existencia e integridad en un momento cierto", "Legalidad del contenido", "Que el documento fue le√≠do por un notario"],
            "ok": "Existencia e integridad en un momento cierto"
        },
        {
            "q": "La cadena de custodia sirve para‚Ä¶",
            "opts": ["Asegurar la confidencialidad del documento", "Demostrar el itinerario y control del objeto probatorio", "Firmar electr√≥nicamente el documento", "Cumplir RGPD autom√°ticamente"],
            "ok": "Demostrar el itinerario y control del objeto probatorio"
        }
    ]
    score = 0
    resp = []
    for i, p in enumerate(preguntas, start=1):
        st.markdown(f"**{i}. {p['q']}**")
        sel = st.radio("Elige una:", p["opts"], key=f"ud3q{i}", index=0)
        resp.append((sel, p["ok"]))
    if st.button("Corregir", key="ud3_corr"):
        for i, (sel, ok) in enumerate(resp, start=1):
            if sel == ok:
                st.success(f"{i}) Correcto ‚úÖ")
                score += 1
            else:
                st.error(f"{i}) Incorrecto ‚ùå ‚Üí Correcta: {ok}")
        st.info(f"Puntuaci√≥n: **{score}/{len(preguntas)}**")

# --------- Glosario & Descargas ---------
with tabs[4]:
    st.subheader("Glosario breve")
    glos = pd.DataFrame({
        "T√©rmino": [
            "Prueba testifical",
            "Prueba documental",
            "Prueba pericial",
            "Evidencia criptogr√°fica",
            "messageDigest (PKCS#7)",
            "Cadena de custodia"
        ],
        "Definici√≥n": [
            "Declaraci√≥n de testigos bajo contradicci√≥n.",
            "Documentos (p√∫blicos/privados) con efectos probatorios.",
            "Informe de experto para valorar hechos t√©cnicos.",
            "Prueba matem√°tica (hash, firma, TSA) verificable por terceros.",
            "Huella hash del contenido firmado en el sobre PKCS#7.",
            "Registro trazable de qui√©n tuvo, c√≥mo y cu√°ndo el indicio/soporte."
        ]
    })
    st.dataframe(glos, width="stretch")

    st.caption("Herramienta **docente**: no sustituye validaciones cualificadas, pol√≠ticas de confianza ni peritajes formales.")
